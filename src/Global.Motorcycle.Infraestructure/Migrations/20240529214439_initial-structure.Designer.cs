// <auto-generated />
using System;
using Global.Motorcycle.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Global.Motorcycle.Infraestructure.Migrations
{
    [DbContext(typeof(MotorcycleManagementContext))]
    [Migration("20240529214439_initial-structure")]
    partial class initialstructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Global.Motorcycle.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<double?>("Amount")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("AMOUNT");

                    b.Property<int?>("DaysUse")
                        .HasColumnType("integer")
                        .HasColumnName("DAYS_USE");

                    b.Property<Guid>("DeliverymanId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELIVERYMAN_ID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_END");

                    b.Property<double?>("Fee")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("FEE");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_INITIAL");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("MOTORCYCLE_ID");

                    b.Property<bool?>("Paid")
                        .HasColumnType("boolean")
                        .HasColumnName("PAID");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("PLAN_ID");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("TB_LOCATION", (string)null);
                });

            modelBuilder.Entity("Global.Motorcycle.Domain.Entities.MotorcycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_CREATE");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("MODEL");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PLATE");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DT_UPDATE");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TB_MOTORCYCLE", (string)null);
                });

            modelBuilder.Entity("Global.Motorcycle.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<double>("Daily")
                        .HasColumnType("double precision")
                        .HasColumnName("DAILY");

                    b.Property<int>("Days")
                        .HasColumnType("integer")
                        .HasColumnName("DAYS");

                    b.Property<double?>("FeeAfter")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("FEE_AFTER");

                    b.Property<double?>("FeeBefore")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("FEE_BEFORE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("TB_PLAN", (string)null);
                });

            modelBuilder.Entity("Global.Motorcycle.Domain.Entities.Location", b =>
                {
                    b.HasOne("Global.Motorcycle.Domain.Entities.MotorcycleEntity", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.Motorcycle.Domain.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorcycle");

                    b.Navigation("Plan");
                });
#pragma warning restore 612, 618
        }
    }
}
